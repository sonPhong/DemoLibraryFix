"use strict";
var BookStatus;
(function (BookStatus) {
    BookStatus["Available"] = "Available";
    BookStatus["Borrowed"] = "Borrowed"; //1
})(BookStatus || (BookStatus = {}));
// t·∫°o class x·ª≠ l√Ω
class Book {
    constructor(id, name, status = BookStatus.Available) {
        this.id = id;
        this.name = name;
        this.status = status;
    }
    // t·∫°o h√†m ki·ªÉm tra ƒë√£ m∆∞·ª£n xong g√°n l·∫°i status n·∫øu ch∆∞a ƒëc m∆∞·ª£n
    borrow() {
        if (this.status === BookStatus.Borrowed) {
            console.log(`S√°ch ${this.name} ƒë√£ c√≥ ng∆∞·ªùi m∆∞·ª£n`);
            return false;
        }
        this.status = BookStatus.Borrowed;
        console.log(`S√°ch ${this.name} ƒë√£ ƒë∆∞·ª£c m∆∞·ª£n th√†nh c√¥ng`);
        return true;
    }
    // h√†m ki·ªÉm tra tr·∫£ s√°ch
    returnBook() {
        if (this.status === BookStatus.Available) {
            console.log(`S√°ch ${this.name} ch∆∞a c√≥ ng∆∞·ªùi m∆∞·ª£n`);
            return false;
        }
        this.status = BookStatus.Available;
        console.log(`S√°ch ${this.name} ƒë√£ ƒë∆∞·ª£c tr·∫£`);
        return true;
    }
}
// c√≥ th·ªÉ m·ªü r·ªông vi·ªác ƒëk s√°ch 
class Borrower {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.borrowedBooks = [];
    }
}
class LibraryManager {
    constructor() {
        this.books = [];
        this.borrowers = [];
    }
    // th√™m book <==> m·ªü r·ªông √°p dung type guard th√™m nhi·ªÅu ho·∫∑c 1 ƒë·ªëi t∆∞·ª£ng c√≥ 2 type
    addBook(book) {
        if (Array.isArray(book)) {
            book.forEach(b => {
                this.books.push(b);
                console.log(`ƒê√£ th√™m s√°ch: ${b.name}`);
            });
        }
        else {
            this.books.push(book);
            console.log(`ƒê√£ th√™m s√°ch: ${book.name}`);
        }
    }
    addBorrower(borrower) {
        if (Array.isArray(borrower)) {
            borrower.forEach(br => {
                this.borrowers.push(br);
                console.log(`ƒê√£ th√™m ng∆∞·ªùi m∆∞·ª£n: ${br.name}`);
            });
        }
        else {
            this.borrowers.push(borrower);
            console.log(`ƒê√£ th√™m ng∆∞·ªùi m∆∞·ª£n: ${borrower.name}`);
        }
    }
    // h√†m cho m∆∞·ª£n s√°ch
    borrowBook(bookID, borrowerID) {
        const book = this.books.find(b => b.id === bookID);
        const borrower = this.borrowers.find(br => br.id === borrowerID);
        if (!book) {
            console.log(`Kh√¥ng t√¨m th·∫•y s√°ch`);
            return;
        }
        if (!borrower) {
            console.log(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi`);
            return;
        }
        const success = book.borrow();
        if (success) {
            borrower.borrowedBooks.push(book);
        }
    }
    // h√†m tr·∫£ s√°ch
    returnBook(bookID, borrowerID) {
        const book = this.books.find(b => b.id === bookID);
        const borrower = this.borrowers.find(br => br.id === borrowerID);
        if (!book) {
            console.log(`Kh√¥ng t√¨m th·∫•y s√°ch`);
            return;
        }
        if (!borrower) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi`);
            return;
        }
        const success = book.returnBook();
        if (success) {
            borrower.borrowedBooks = borrower.borrowedBooks.filter(b => b.id !== bookID);
        }
    }
    // hi·ªán list book
    listBooks() {
        console.log(`Danh s√°ch c√°c s√°ch trong th∆∞ vi·ªán`);
        this.books.forEach(book => {
            console.log(`- ${book.id} ++ ${book.name} ++ [${book.status}]`);
        });
    }
    listBorrowers() {
        console.log("Danh s√°ch ng∆∞·ªùi m∆∞·ª£n");
        this.borrowers.forEach(borrower => {
            console.log(`- ${borrower.id} ++ ${borrower.name}`);
        });
    }
    listBorrowedBooks(borrowerID) {
        const borrower = this.borrowers.find(br => br.id === borrowerID);
        if (!borrower) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi m∆∞·ª£n`);
            return;
        }
        if (borrower.borrowedBooks.length === 0) {
            console.log(`üìö Ng∆∞·ªùi m∆∞·ª£n ${borrower.name} ch∆∞a m∆∞·ª£n s√°ch n√†o.`);
            return;
        }
        console.log(`üìö Danh s√°ch s√°ch ƒë√£ m∆∞·ª£n c·ªßa ${borrower.name}:`);
        borrower.borrowedBooks.forEach(book => {
            console.log(`- ${book.name}`);
        });
    }
}
const library = new LibraryManager();
// Th√™m s√°ch
const book1 = new Book("B003", "Clean Code");
const book2 = new Book("B001", "2 Con V·ªãt");
const book3 = new Book("B002", "Clean Code");
const book4 = new Book("B004", "Chill Chill");
library.listBooks();
library.addBook(book1);
library.addBook(book2);
library.addBook(book3);
library.addBook(book4);
library.listBooks();
// Th√™m ng∆∞·ªùi m∆∞·ª£n
const borrower1 = new Borrower("112", "paaalz");
const borrower2 = new Borrower("213", "Pro");
const borrower3 = new Borrower("214", "Proxxx");
const borrower4 = new Borrower("215", "Proaaaaaa");
const borrower5 = new Borrower("216", "Prwwwo");
const arrBr = [borrower3, borrower4, borrower5];
library.addBorrower(borrower1);
library.addBorrower(arrBr);
// M∆∞·ª£n s√°ch
library.borrowBook("B001", "216");
library.borrowBook("B003", "216");
library.borrowBook("B004", "216");
library.borrowBook("B002", "216");
// Tr·∫£ s√°ch
//library.returnBook("B001");
// // Hi·ªÉn th·ªã danh s√°ch
// //library.listBooks();
// library.listBorrowers();
// library.listBooks();
library.listBorrowedBooks("216");
